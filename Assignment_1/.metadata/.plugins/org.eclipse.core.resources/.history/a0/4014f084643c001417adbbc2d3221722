package edu.jhu.cs.schew4.oose;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import edu.jhu.cs.oose.fall2014.shuffletter.iface.Position;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterIllegalMoveEvent;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterModel;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterModelListener;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterTile;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterTileMovedEvent;
import edu.jhu.cs.oose.fall2014.shuffletter.iface.ShuffletterTilePlayedEvent;

public class MyShuffletterModel implements ShuffletterModel{
	
	private ArrayList<MyShuffletterTile> shuffleBag;
	private ArrayList<ShuffletterModelListener> listeners;
	private ArrayList<MyShuffletterTile> supply;
	private Set<String> wordList;
	private HashMap<Position, ShuffletterTile> board;
	
	public MyShuffletterModel() {
		//TODO
		//Models should have bags of tiles, a supply of tiles, a list of legal words, and listeners
		shuffleBag = new ArrayList<MyShuffletterTile>();
		supply = new ArrayList<MyShuffletterTile>();
		listeners = new ArrayList<ShuffletterModelListener>();
		board = new HashMap<Position, ShuffletterTile>();
		
		wordList = new HashSet<String>();
		String word;
		try {
			BufferedReader read = new BufferedReader(new FileReader(new File ("wordlist.txt")));
			try {
				while ((word = read.readLine()) != null) {
					wordList.add(word);
				}
				read.close();
			} catch (IOException e) {
				System.err.println("Bad input: " + e);
			}
		} catch (FileNotFoundException e) {
			System.err.println("File not found: " + e);
		}
		
		//Populate bag with tiles
		//Adding new tiles into the bag with no position
		for (int i = 0; i < 2; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'J'));
			shuffleBag.add(new MyShuffletterTile(null, 'K'));
			shuffleBag.add(new MyShuffletterTile(null, 'Q'));
			shuffleBag.add(new MyShuffletterTile(null, 'X'));
			shuffleBag.add(new MyShuffletterTile(null, 'Z'));
		}
	
		for (int i = 0; i < 3; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'B'));
			shuffleBag.add(new MyShuffletterTile(null, 'C'));
			shuffleBag.add(new MyShuffletterTile(null, 'F'));
			shuffleBag.add(new MyShuffletterTile(null, 'H'));
			shuffleBag.add(new MyShuffletterTile(null, 'M'));
			shuffleBag.add(new MyShuffletterTile(null, 'P'));
			shuffleBag.add(new MyShuffletterTile(null, 'V'));
			shuffleBag.add(new MyShuffletterTile(null, 'W'));
			shuffleBag.add(new MyShuffletterTile(null, 'Y'));
		}
		
		for (int i = 0; i < 4; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'G'));
			
		}
		
		for (int i = 0; i < 5; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'L'));
		}
		
		for (int i = 0; i < 6; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'D'));
			shuffleBag.add(new MyShuffletterTile(null, 'S'));
			shuffleBag.add(new MyShuffletterTile(null, 'U'));
		}
		
		for (int i = 0; i < 8; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'N'));
		}
		
		for (int i = 0; i < 11; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'O'));
		}
		
		for (int i = 0; i < 9; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'T'));
			shuffleBag.add(new MyShuffletterTile(null, 'R'));
		}
		
		for (int i = 0; i < 12; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'I'));
		}
		
		for (int i = 0; i < 13; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'A'));
		}
		
		for (int i = 0; i < 18; i ++) {
			shuffleBag.add(new MyShuffletterTile(null, 'E'));
		}
		
		shuffleBag.add(new MyShuffletterTile(null, ' '));
	}

	public void addListener(ShuffletterModelListener listener) {
		listeners.add(listener);
	}

	public void endRound() {
		//TODO
		//supply is 0
		//end of round - check positions are legal, check if word is legal, check end of game
		//put in another tile into the supply
	}
	
	public String getAuthorName() {
		return "Stephanie Chew";
	}
	
	public int getBagCount() {
		return shuffleBag.size();
	}
	
	public Set<String> getLegalWords() {
		// Get list of words from file generated in constructor
		return wordList;
	}
	
	public List<ShuffletterTile> getSupplyContents() {
		//TODO
		//Arraylist of supply tiles
		return supply;
		//return null;
	}
	
	public ShuffletterTile getTile(Position p) {
		//Finds the tile with given position on the board
		return board.get(p);
	}
	
	public Collection<Position> getTilePositions() {
		//Gets set of key positions on board
		return board.keySet();
	}
	
	public boolean isGameOver() {
		//End the game when no tiles are left in the bag
		if (shuffleBag.size() == 0 && supply.size() == 0) {
			//TODO
			this.endRound();
			return true;
		}
		return false;
	}
	
	public void move(Position source, Position target) {
		//move existing tile
		ShuffletterTile s = board.get(source);
		//If tile exists at target position, switch places
		ShuffletterTile t = this.getTile(target);
		if (t != null) {
			//Swap tile positions
			//s.setPosition(target);
			//t.setPosition(source);
			
			board.remove(source);
			board.remove(target);
			
			board.put(target, s);
			board.put(source, t);
		} else {
			//Put source tile into target position
			//s.setPosition(target);
			board.remove(source); 
			board.put(target, s);
		}
		
		//Notify each of the listeners that a move was made
		ShuffletterTileMovedEvent moveEvent = new ShuffletterTileMovedEvent(source, target, s);
		for (ShuffletterModelListener l : this.listeners ) {
			l.tileMoved(moveEvent);
		}
	}

	public void play(ShuffletterTile tile, Position target) {
		//Check validity of move
		if (board.get(target) != null) {
			//Create illegal event
			ShuffletterIllegalMoveEvent misplacedTileEvent = new ShuffletterIllegalMoveEvent("Sorry! You can't put this tile here. Try another spot.");
			//Notify listener of illegal event
			for (ShuffletterModelListener l : this.listeners) {
				l.illegalMoveMade(misplacedTileEvent);
			}
			return;
		}
		//Add tile to board, remove from supply
		supply.remove(target);
		//tile.setPosition(target);
		board.put(target, tile);
		
		//Notify listeners
		ShuffletterTilePlayedEvent playEvent = new ShuffletterTilePlayedEvent(target, tile);
		for(ShuffletterModelListener l : this.listeners) {
			l.tilePlayed(playEvent);
		}
	}
	
	public void removeListener(ShuffletterModelListener listener){
		listeners.remove(listener);
	}
}
